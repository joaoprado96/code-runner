import datetime
import sys
from funcoesmysql import *

def main():
    body = sys.argv[1]
    data = json.loads(body)
    
    jsonresposta= {
        "EM DESENVOLVIMENTO": ['OP√á√ïES S√ÉO FICTICIAS'],
        "MI.SANDBOX.BATCH.TESTE1":['ARQUIVO1', 'ARQUIVO2', 'ARQUIVO3', 'ARQUIVO4'],
        "MI.SANDBOX.BATCH.TESTE2":['ARQUIVO1', 'ARQUIVO2', 'ARQUIVO3', 'ARQUIVO4'],
        "MI.SANDBOX.BATCH.TESTE3":['ARQUIVO1', 'ARQUIVO2', 'ARQUIVO3', 'ARQUIVO4'],
        "MI.SANDBOX.BATCH.TESTE4":['ARQUIVO1', 'ARQUIVO2', 'ARQUIVO3', 'ARQUIVO4']
    }

    print(json.dumps(jsonresposta))

Ol√°, equipe incr√≠vel! üåü

Tenho uma not√≠cia empolgante para compartilhar com voc√™s! Depois de muito trabalho e dedica√ß√£o, conseguimos desvendar os mist√©rios por tr√°s das implanta√ß√µes do Outbound do R1. Nosso foco? Atender √†s exig√™ncias legais dos contrapartes com efici√™ncia e agilidade.

Vamos mergulhar no problema: No grande dia da ativa√ß√£o do piloto do R1, enfrentamos um desafio inesperado. A pe√ßa constru√≠da na AWS, projetada para gerenciar as chamadas HTTP, come√ßou a apresentar comportamentos estranhos, especialmente relacionados ao banco de dados de controle. Com o aumento das solicita√ß√µes, a quantidade de conex√µes com o banco disparou, levando a um ponto onde a API simplesmente se sobrecarregava, resultando apenas em timeouts.

Aqui vem o curioso: com o tsunami de requisi√ß√µes, notamos algo peculiar. A forma como a aplica√ß√£o usava as fun√ß√µes do MCAR, ao longo do dia, fazia com que a √°rea do MCAR se saturasse, e o programa QT come√ßasse a falhar na grava√ß√£o de novos contextos, retornando o c√≥digo C na fun√ß√£o SAV. Era um comportamento inesperado, j√° que as √°reas do MCAR t√™m um tempo de expira√ß√£o e s√£o limpas automaticamente. Uma tarefa tentava usar essa √°rea ao chamar a fun√ß√£o de pesquisa, mas sem sucesso.

Ap√≥s uma an√°lise minuciosa, descobrimos que o MCAR √© composto por duas tabelas essenciais:

Tabela de controle das √°reas do MCAR.
Tabela de controle de chaves do QT.
Elas operam juntas nas fun√ß√µes do MCAR, mas n√£o h√° uma refer√™ncia direta entre as tabelas. Em certos cen√°rios, as informa√ß√µes na tabela de chaves do QT pareciam flutuar.

A solu√ß√£o engenhosa? Criamos duas tabelas distintas para evitar aloca√ß√µes desnecess√°rias de √°reas. Com uma tabela de controle de chaves do QT e m√∫ltiplas tabelas de controle de √°reas do MCAR (uma para cada monitor/CICS registrado na MTMN), otimizamos o uso dessas √°reas. Isso nos salvou de um aumento significativo (cerca de 30MB) em cada monitor.

O cerne do problema estava na tabela de controle de chaves do QT. Uma falha l√≥gica na reutiliza√ß√£o de √°reas s√≥ se tornava aparente quando a aplica√ß√£o usava excessivamente a fun√ß√£o de salvamento de contexto, sem recuper√°-lo. Com o tempo, as √°reas ficavam saturadas e a l√≥gica de reutiliza√ß√£o n√£o conseguia identificar √°reas expiradas que poderiam ser reutilizadas.

Esse problema era antigo, mas s√≥ veio √† tona agora. Normalmente, a aplica√ß√£o sempre executa um SAV seguido de um REC, evitando o ac√∫mulo. No entanto, no novo parceiro do QT, os desfazimentos n√£o recuperavam o contexto, o que exacerbou o problema.

Nossa solu√ß√£o foi implementar uma l√≥gica para identificar as √°reas expiradas na tabela de controle de chaves do QT. Testamos tudo com sucesso!

Estou adiantando o envio da vers√£o 87A para homologa√ß√£o, ansioso para ver nossa solu√ß√£o em a√ß√£o.

Abra√ßos tecnol√≥gicos! üöÄüë©‚Äçüíªüë®‚Äçüíª

